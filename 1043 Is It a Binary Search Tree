#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    node *l, *r;
};
vector<int> pre, pos;
void add1(node *&tree, int data) 
{
    if (tree == NULL)
    {
        tree = new node;
        tree->data = data;
        tree->l = tree->r = NULL;
        return;
    }
    else if (data >= tree->data)
        add1(tree->r, data);
    else
        add1(tree->l, data);
}
void add2(node *&tree, int data)
{
    if (tree == NULL)
    {
        tree = new node;
        tree->data = data;
        tree->l = tree->r = NULL;
        return;
    }
    else if (data >= tree->data)
        add2(tree->l, data);
    else
        add2(tree->r, data);
}
void postraver(node *tree)
{
    if (tree)
    {
        postraver(tree->l);
        postraver(tree->r);
        pos.push_back(tree->data);
    }
}
void pretraver(node *tree)
{
    if (tree)
    {
        pre.push_back(tree->data);
        pretraver(tree->l);
        pretraver(tree->r);
    }
}
void output(vector<int> aa)
{
    cout << "YES" << endl;
    for (int i = 0; i < aa.size(); i++)
    {
        if (i == 0)
        {
            cout << aa[0];
        }
        else
            cout << ' ' << aa[i];
    }
}
int main()
{

    node *tree1 = NULL, *tree2 = NULL;
    int n;
    cin >> n;
    vector<int> num(n);
    for (int i = 0; i < n; i++)
    {
        cin >> num[i];
        add1(tree1, num[i]);
        add2(tree2, num[i]);
    }
    pretraver(tree1);
    if (num == pre || num == pos)
    {
        postraver(tree1);
        output(pos);
        system("pause");
        return 0;
    }
    pre.clear();
    pos.clear();
    pretraver(tree2);
    if (num == pre)
    {
        postraver(tree2);
        output(pos);
        system("pause");
        return 0;
    }
    else
        cout << "NO";
    system("pause");
    return 0;
}
