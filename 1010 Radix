
#include <bits/stdc++.h>
using namespace std;
//将字符串的数字转为指定进制的数字
unsigned long long convert(string N, int radix)
{
  unsigned  long long num = 0;
    for (int i = 0; i < N.size(); i++)
    {
        num *= radix;
        int temp = isdigit(N[i]) ? N[i] - '0' : N[i] - 'a' + 10;
        num += temp;
    }
    return num;
}

int main()
{
    int tag, radix,flag=0; 
    unsigned long long N1_num,start,end,half,num;
    string N1, N2;
    cin >> N1 >> N2 >> tag >> radix;
    if (tag == 2)
        swap(N1, N2);
     N1_num = convert(N1, radix);
    char max_N2 = *max_element(N2.begin(), N2.end());
    int max_N2_digit = isdigit(max_N2) ? max_N2 - '0' : max_N2 - 'a' + 10;
    start = max(1, max_N2_digit) + 1; //进制下限为2或N2字符的最大值加一
    end = N1_num + 1; //进制上限位N1的值加一
    while (start <= end)
    {
        half = (start + end) / 2;
        num = convert(N2, half);
        if (num < N1_num)
            start = half + 1;
        else if (num > N1_num || num < 0)
            end = half - 1;
        else
        {
            flag = 1;
            break;
        }
    }
    if (flag)
        cout << half;
    else
        cout << "Impossible";
    system("pause");
    return 0;
}
