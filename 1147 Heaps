#include <bits/stdc++.h>
using namespace std;

struct node

{
    int data;
    node *left, *right;
};
int n, m;

node *init(vector<int> data, node *root, int i)
{
    if (i >= m)
        return NULL;
    if (root == NULL)
    {
        root = new node;
        root->data = data[i];
        root->left = root->right = NULL;
    }
    root->left = init(data, root->left, 2 * i + 1);
    root->right = init(data, root->right, 2 * i + 2);
    return root;
}

int flag1 = 1, flag2 = 1;
vector<int> ans;
void check(node *root, vector<int> pre)
{
    if (root != NULL)
    {
        if (!pre.empty())
        {
            if (root->data > pre.back()) //大根堆
                flag1 = 0;
            if (root->data < pre.back()) //小根堆
                flag2 = 0;
        }
        pre.push_back(root->data);
        check(root->left, pre);
        check(root->right, pre);
          ans.push_back(root->data);
    }
}


int main()
{
    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        vector<int> data(m), pre;
        for (int j = 0; j < m; j++)
            cin >> data[j];
        node *root = NULL;
        root = init(data, root, 0);
        check(root, pre);
        if (!flag1 && !flag2)
            cout << "Not Heap\n";
        else
            printf("%s\n", flag1 == 1 ? "Max Heap" : "Min Heap");
        flag1 = flag2 = 1;
        for (int i = 0; i < m; i++)
        {
            if (i != 0)
                cout << ' ';
            cout << ans[i];
        }
        ans.clear();
        cout << endl;
    }
    system("pause");
    return 0;
}
