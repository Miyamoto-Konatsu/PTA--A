//题解：
//     1.合并排序 ，超时超内存（舍）
//     2.维护 两个队列，比较对头大小,循环出队:原先的测试点可以通过的，
//      后来新版PAT加了内存限制，超内存（舍）
//     3.在2 的基础上优化，第一个队列存好后，把第二个队列边读，边和第一个队列比较，选择出队。
//      这样可以不用一次存完第二个队列，解决超内存的问题。
//思路 ：
//    第一 、二个序列分别有n, m个元素，所以需要从队头剔除（n + m - 1） / 2个元素，
//      最后答案就是两个队头的最小值。
//   对于最终答案在第一第二个队列中的情况要分开处理。若答案在第二个队列中，
//    在输入数据时就可以提前得出答案并退出，若答案在第一个队列中，要二次出队才能找到答案。
//
//注意：
//    在所有元素入队列完毕后，把INT_MAX入队列，一是这样队列永不为空，方便处理。
//    二是，题目的long int因为内存限制原因，并不会为最终答案，只
//    是干扰数据，所以每次遇到这样的干扰数据把他设为INT_MAX就好了。
#include<cstdio>
#include<queue>
using namespace std;
const int INF = 10000000;
int main(){
    queue<int> a,b;
    int n,m,x,count = 0;
    scanf("%d",&n);
    for(int i = 0 ; i < n ; i++){
        scanf("%d",&x);
        a.push(x);
    }
    a.push(INF);
    scanf("%d",&m);
    for(int i = 0 ; i < m ; i++){
        scanf("%d",&x);
        b.push(x);
        if(count == (n+m-1)/2){
            printf("%d",min(a.front(),b.front()));
            return 0;
        }
        if(a.front() < b.front()) a.pop();
        else b.pop();
        count++;
    }
    b.push(INF);
    for(; count < (n+m-1)/2; count++){
        if(a.front() < b.front()) a.pop();
        else b.pop();
    }
    printf("%d",min(a.front(),b.front()));
    return 0;
}




//我的代码
#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n, m, i, x;
    cin >> n;
    queue<int> a, b;
    for (i = 0; i < n; i++)
    {
        scanf("%d", &x);
        a.push(x);
    }
    cin >> m;
    int time = (n + m - 1) / 2;
    for (i = 0; i < m; i++)
    {
        scanf("%d", &x);
        b.push(x);
        if (time == 0)
        {
            if (b.empty())
                cout << a.front();
            else if (a.empty())
                cout << b.front();
            else
                cout << min(a.front(), b.front());
            system("pause");
            return 0;
        }
        time--;
        if (!a.empty())
            if (a.front() < b.front())
                a.pop();
            else
                b.pop();
        else
            b.pop();
    }
    while (time)
    {
        if (b.empty())
            a.pop();
        else if (a.empty())
            b.pop();
        else
        {
            if (a.front() < b.front())
                a.pop();
            else
                b.pop();
        }
        time--;
    }
    if (b.empty())
        cout << a.front();
    else if (a.empty())
        cout << b.front();
    else
        cout << min(a.front(), b.front());
    system("pause");
    return 0;
}
